clear;

// isqrt(n,  u) which  gives as  its  value  the  smallest  positive  integer  j  such  that  j^2 >= n and  gives to  u the  corresponding  value  of  j^2  â€” n
function isqrt(n)
	j := Ceiling(Sqrt(n));
	return j,j^2-n;
end function;




function Factorization_Lehman(n)
	// quadratic residue modulo qr_mod
	qr_mod := 729;
	QR := [false : _ in [1..qr_mod]];
	for i in [1..364] do
		QR[((i^2) mod qr_mod) + 1]:= true;
	end for;
	
	r := Ceiling(n^(1/3));

  	C := [ 	<1,0,[30]>,
		<4,-24,[48,24,24,24]>,
		<4,-12,[24,24,48,24]>,
		<4,-18,[36,36,72,36]>,
		<8,-6, [12,36,24,12,24,12,24,36]>,
		<2,-2, [4,2]>,
		<1,-1, [2]> 
        ];
        
	for array in C do
		m:= array[1];
		m0 := array[2];
		c := array[3];
    
		// this is the function large(m,m0,r,N,c);
		s := 1;
		k := m0;
    
		k := k + c[s];
		s := (s mod m) + 1;
    
		while k le r do
			x,u := isqrt(4*k*n); 
			buff,t := isqrt(n div k);
			j := (buff - 1) div (4*(r+1));
			if ((x+k) mod 2) eq 0 then 
				i1 := 1;
				u := u + 2*x +1;
				x := x + 1;
			else
				i1 := 0;
			end if;

			odd := (k mod 2) eq 1;
			if odd then 
				jump := 4;
			else 
				jump := 2;
			end if;


			if odd then 
				if ((k+n) mod 4) eq (x mod 4) then
					i1 := i1 + 2;
					u := u + 4*(x+1);
					x := x + 2;
				end if;
			end if;
			

			for i in [i1..(j+1) by jump] do
				if QR[(u mod qr_mod) + 1] then
					y,t := isqrt(u);
					if t eq 0 then
						// VICTORY
						p := GCD(x-y,n);
						q := n div p;
						return Min(p,q),Max(p,q);
					end if;
				end if;
				if odd then
					u := u + 8*(x+2);
					x := x+ 4;
				else
					u := u + 4*(x+1);
					x := x + 2;
				end if;
			end for;
			
			k := k + c[s];
			s := (s mod m) + 1;
		end while;
	end for;
	return 1,n;
end function;


TestLehman:=[ car<IntegerRing(), IntegerRing(), IntegerRing()> | <2019211151107, 1030429, 1959583>, <1670209703369, 893939, 
1868371>, <1342752363619, 777871, 1726189>, <1311201058501, 771209, 1700189>, <1327620307381, 776117, 1710593>, 
<1554928869881, 860333, 1807357>, <937178452013, 608369, 1540477>, <2047899603287, 1023721, 2000447>, <1215421840639, 
727271, 1671209>, <1233641651573, 726377, 1698349>, <1023497573051, 649657, 1575443>, <1418828835421, 814399, 1742179>, 
<901321670701, 575821, 1565281>, <1542119896117, 844769, 1825493>, <1608486961327, 867563, 1854029>, <1377968337013, 
796247, 1730579>, <1204283756021, 726601, 1657421>, <1440528845507, 826607, 1742701>, <1302258811307, 772571, 1685617>, 
<1611666804439, 872023, 1848193>, <1654176042991, 897881, 1842311>, <1727616403333, 924431, 1868843>, <1362529927739, 
799489, 1704251>, <985366769053, 622547, 1582799>, <1587273086507, 886993, 1789499>, <1541570898997, 851603, 1810199>, 
<1398802743511, 799151, 1750361>, <1848995722291, 981377, 1884083>, <1327522861531, 768491, 1727441>, <849008497177, 
571751, 1484927>, <1869219910087, 959759, 1947593>, <873033779543, 563357, 1549699>, <796852319761, 530177, 1502993>, 
<1471106455289, 826723, 1779443>, <1618523623883, 886993, 1824731>, <1429625107321, 799483, 1788187>, <1113650018293, 
682333, 1632121>, <2042721354461, 1015207, 2012123>, <1068795464323, 659609, 1620347>, <1603012188971, 887441, 1806331>,
<2022509764867, 1041121, 1942627>, <1355363715401, 777583, 1743047>, <996870672199, 635051, 1569749>, <1433580176681, 
821851, 1744331>, <1321421826449, 761389, 1735541>, <814790141941, 548459, 1485599>, <1585243208933, 878021, 1805473>, 
<1408274616019, 799723, 1760953>, <1422344924873, 814687, 1745879>, <994170394423, 642977, 1546199>];

procedure test_lehman()
	for vector in TestLehman do
    N:=vector[1];
    p:=vector[2];
    q:=vector[3];
    factorp, factorq:=Factorization_Lehman(N);
    [p,q] eq [factorp, factorq];
  end for;
end procedure;

time test_lehman();
