

load "new_test_lehman.mag";


function isqrt(n)
	j := Ceiling(Sqrt(n));
	return j,j^2 -n;
end function;


// quadratic residue modulo qr_mod
qr_mod := 279; // time 13.619 sec
//qr_mod := 720; // time 14.210 sec
//qr_mod := 200;
//qr_mod := 729; // time 14.670 sec
// Qui ho fatto una prova per vedere se ci sono mod migliori
//qr_mod := 9363;


small_acc_qr := [ 23, 35, 45, 49, 51, 53, 55, 57, 63, 65, 69, 70, 75, 77, 78, 85, 90, 91, 93, 95, 99, 
102, 105, 110, 115, 117, 119, 121, 126, 130, 132, 133, 135, 140, 143, 145, 147, 153, 
154, 155, 156, 161, 165, 170, 171, 174, 175, 177, 180, 182, 185, 187, 189, 190, 195, 
196, 198, 200, 203, 204, 205, 207, 209, 210, 214, 215, 217, 218, 220, 221, 222, 225, 
228, 230, 231, 234, 235, 237, 238, 242, 245, 246, 247, 249, 252, 253, 254, 255, 259, 
260, 261, 264, 265, 266, 267, 270, 273, 275, 279, 280, 285, 286, 287, 289, 290, 291, 
294, 295, 297, 299, 301, 305, 306, 308, 310, 312, 315, 318, 319, 321, 322, 323, 325, 
327, 329, 330, 333, 335, 340, 341, 342, 345, 348, 350, 351, 354, 355, 357, 361, 362, 
364, 365, 366, 369, 370, 371, 372, 374, 377, 380, 385, 387, 390, 391, 393, 395, 396, 
397, 399, 402, 403, 406, 407, 410, 413, 414, 415, 417, 418, 420, 423, 425, 426, 427, 
429, 430, 431, 434, 435, 437, 438, 440, 441, 442, 443, 444, 445, 447, 450, 451, 453, 
455, 457, 459, 462, 464, 465, 468, 469, 470, 471, 473, 474, 475, 476, 477, 479, 481, 
483, 485, 489, 490, 492, 493, 494, 495, 497, 499, 501, 504, 505, 506, 510, 511, 513, 
515, 517, 518, 519, 520, 522, 525, 527, 528, 530, 531, 532, 533, 534, 535, 537, 539, 
540, 543, 545, 546, 549, 550, 551, 552, 553, 555, 558, 559, 560, 561, 563, 565, 567, 
569, 570, 572, 573, 574, 575, 577, 579, 580, 581, 583, 585, 588, 589, 590, 592, 594, 
595, 597, 598, 602, 603, 605, 606, 609, 610, 611, 612, 615, 616, 618, 620, 621, 623, 
624, 627, 629, 630, 633, 635, 637, 638, 639, 642, 644, 645, 646, 649, 650, 651, 653, 
655, 657, 658, 659, 661, 663, 665, 666, 667, 669, 670, 671, 673, 675, 676, 678, 679, 
680, 681, 682, 684, 685, 687, 689, 690, 693, 694, 695, 696, 697, 699, 700, 702, 703, 
705, 707, 710, 711, 713, 714, 715, 719, 720, 721, 723, 725, 728, 730, 731, 735, 737, 
740, 741, 742, 745, 747, 748, 749, 750, 754, 755, 756, 758, 759, 760, 762, 763, 765, 
767, 769, 770, 771, 772, 774, 775, 777, 779, 780, 781, 782, 783, 784, 785, 786, 790, 
791, 792, 793, 795, 797, 798, 799, 801, 803, 805, 806, 807, 809, 810, 812, 813, 814, 
815, 816, 817, 819, 821, 822, 825, 826, 828, 830, 831, 833, 834, 835, 836, 837, 838, 
840, 842, 843, 845, 846, 847, 849, 850, 851, 852, 854, 855, 858, 859, 860, 861, 863, 
865, 867, 868, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 884, 
885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 899, 900, 901, 902, 903, 
905, 906, 909, 910, 912, 913, 915, 917, 918, 919, 920, 921, 923, 924, 925, 927, 930, 
931, 933, 935, 936, 938, 939, 940, 942, 943, 945, 946, 947, 949, 950, 952, 954, 955, 
956, 957, 959, 962, 963, 965, 966, 968, 969, 970, 973, 975, 979, 980, 981, 982, 985, 
986, 987, 989, 990, 994, 995, 997, 999 ];

for qr_mod in small_acc_qr cat [1001..10000] do


QR := [false : _ in [1..qr_mod]];
for i in [1..qr_mod] do
	QR[(i^2 - 1) mod qr_mod + 1]:= true;
end for;

function Factorization_Lehman(N)
/*
     INPUTS:  -N is the semiprime
     OUTPUT:  -p is the smallest prime factor of N
              -q is the largest prime factor of N
*/
	// Bho proviamo a definire r
	r := Floor(N^(0.25)) + 1 ;
	// Bho proviamo a dare valore ai c e large
	C := [ 	<1,0,[30]>,
		<4,-24,[48,24,24,24]>,
		<4,-12,[24,24,48,24]>,
		<4,-18,[36,36,72,36]>,
		<8,-6, [12,36,24,12,24,12,24,36]>,
		<2,-2, [4,2]>,
		<1,-1, [2]>
	     ];
	n := N;
	for array in C do
		m:= array[1]; m0 := array[2];
		c := array[3];
		// this is the function large(m,m0,r,N,c);
		s := 1; k := m0;
		k := k + c[s];
		// forse if √® meglio ??
		s := (s mod m) + 1;
		while k le r do
			x,u := isqrt(4*k*n); 
			buff,t := isqrt(n div k);
			j := (buff - 1) div (4*(r+1)) + 1;
			if ((x+k) mod 2) eq 0 then 
				i1 := 1;
				u := u + 2*x +1;
				x := x + 1;
			else
				i1 := 0;
			end if;

			odd := (k mod 2) eq 1;
			if odd then 
				jump := 4;
			else 
				jump := 2;
			end if;

			// speed up : compress them
			if odd then 
				if ((k+n) mod 4) ne (x mod 4) then
					i1 := i1 + 2;
					u := u + 4*(x+1);
					x := x + 2;
				end if;
			end if;
			
			
			for i in [i1..(j+1) by jump] do
				if QR[(u-1) mod qr_mod + 1] then
					y,t := isqrt(u);
					if t eq 0 then
						// VICTORY
						p := Gcd(x-y,n);
						q := n div p;
						return Min(p,q),Max(p,q);
					end if;
				end if;
				if odd then
					
					u := u + 8*(x+2);
					x := x+ 4;
				else
					u := u + 4*(x+1);
					x := x + 2;
				end if;
			end for;
			k := k + c[s];
			s := (s mod m) + 1;
		end while;
	end for;
	return 1,N;
end function;





procedure test_lehman()
	pb := [car<IntegerRing(), IntegerRing(), IntegerRing()> | ];
	for test in TestLehman do
		n := test[1];
		p := test[2];
		r := Floor(n^(1/3)) + 1;
		if not (Sqrt((n/(r+1))) lt p and p le n^(1/2)) then
			"In this situation the theorem cannot grant the existance of a factorization with this algorithm";
		end if;
		p,q:=Factorization_Lehman(test[1]);
		if (p ne test[2]) or (q ne test[3]) then
			Append(~pb,test);
			"\nError! The problem is for test:",test; 
			"Output:",p, q; //break;
		end if;
	end for;
end procedure;


t := Cputime();
test_lehman();
time_qr := Cputime(t);

"exp =",0.25,"| qr =",qr_mod,"| time =",time_qr;

Write("output_qr.mag",<exp,qr_mod,time_qr>);

end for;
