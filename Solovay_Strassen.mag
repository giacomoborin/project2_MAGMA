
function JacobySymbol(a,n)
	return 0;
end function;


function SolovayStrassen(n)
/*
	INPUTS:   -n integer to be tested.
     	OUTPUTS:  -bool, a Boolean value.
*/
	/*
	Non so se mettere questo controllo
	if n mod 2 eq 0 then 
		return false;
	end if;
	*/
	for i in [1..10] do
		a := Random(1,n-1);
		x := JacobiSymbol(a, n) mod n;
		if x eq 0 then
			return false;
		end if;
		y := Modexp(a,(n-1) div 2, n);
		if x ne y then
			return false;
		end if;
	end for;
	return true;
end function;


/*
The output bool is true if and only if n is prime, false otherwise.
Remark. Since this is a probabilistic algorithm, we require that you repeat
the test for 10 times before outputting the result than n is prime.
*/


// our file with lots of test vectors
load "new_test_vectors.mag";

S := [ Random(10^5,10^7) : _ in [1..(20*6100)]];
TestSolovay := [ s : s in S | s mod 2 eq 1];
#TestSolovay;

procedure test_solovay_strassen()
	for test in TestSolovay do
		if not SolovayStrassen(test) eq IsPrime(test) then
			"Error! The problem is for test:\n";
			test; break;
		end if;
	end for;
end procedure;

time test_solovay_strassen();
