
function prop1(S)
	S[1] := S[1] mod S[2];
	return S;
end function;

function prop32(S)
	seq := Intseq(S[1],2);
	v2 := Index(seq,1) - 1;
	S[1]:=Seqint(seq[(v2+1)..#seq],2);
	if (v2 mod 2 eq 1) and ((S[2] mod 8) in [3,5]) then
		S[3]:=S[3]*(-1);
	end if;
	return S;
end function;

function prop4(S)
	if (S[1] mod 4 eq 3) and (S[2] mod 4 eq 3) then
		S[3] := S[3]*(-1);
	end if;
	buff := S[1];
	S[1] := S[2];
	S[2] := buff;
	return S;
end function;


function OURJacobiSymbol(a,n)
	if GCD(a,n) ne 1 then
		return 0;
	end if;
	r := 1;
	while a gt 1 do
		
		// S := prop32(S);
		// S := prop4(S);
		// S := prop1(S);
		
		seq := Intseq(a,2);
		v2 := Index(seq,1) - 1;
		a:=Seqint(seq[(v2+1)..#seq],2);
		if (v2 mod 2 eq 1) and ((n mod 8) in [3,5]) then
			r:=r*(-1);
		end if;

		if (a mod 4 eq 3) and (n mod 4 eq 3) then
			r := r*(-1);
		end if;
		buff := a;
		a := n mod a;
		n := buff;

	end while;
	return r;
end function;


function SolovayStrassen(n)
/*
	INPUTS:   -n integer to be tested.
     	OUTPUTS:  -bool, a Boolean value.
*/
	/*
	We could add this first and trivial check if we suppose that n could be even too
	if n mod 2 eq 0 then 
		return false;
	end if;
	*/
	//For the SolovayStrassen algorithm, suppose that n is odd and greter than 1
	
	for i in [1..10] do
		//Try for a random base a
		a := Random(2,n-1);
		//There exists a built-in function for JacoobiSymbol that is much faster than whatever we can manually implement
		x := OURJacobiSymbol(a, n) mod n;
		//From the properties of the JacobiSymbol we have that if there exists such a a, we are sure that the number x is composite
		//because JacobiSymbol(a, n) eq 0 if GCD(a,n) ne 1
		if x eq 0 then
			return false;
		end if;
		//Here we suppose that n is odd, so (n-1) is even and we can perform div (that is much faster than the standard division /)
		y := Modexp(a,(n-1) div 2, n);
		//If n is composite, it may be the case that the following condition does not hold
		if x ne y then
			return false;
		end if;
	end for;
	//If the algorithm arrives here, we are sure that n is prime or is Euler pseudo-prime to the base a for the a chosen before
	return true;
end function;


/*
The output bool is true if and only if n is prime, false otherwise.
Remark. Since this is a probabilistic algorithm, we require that you repeat
the test for 10 times before outputting the result than n is prime.
*/

