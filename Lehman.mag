
function isqrt(n)
	j := Ceiling(Sqrt(n));
	return j,j^2 -n;
end function;


// quadratic residue modulo qr_mod
//qr_mod := 279; // time 13.619 sec
qr_mod := 385; // time 12.800 sec
//qr_mod := 720; // time 14.210 sec
//qr_mod := 200;
//qr_mod := 729; // time 14.670 sec
// Qui ho fatto una prova per vedere se ci sono mod migliori
//qr_mod := 9363;
QR := [false : _ in [1..qr_mod]];
for i in [1..qr_mod] do
	QR[(i^2 - 1) mod qr_mod + 1]:= true;
end for;

function Factorization_Lehman(N)
/*
     INPUTS:  -N is the semiprime
     OUTPUT:  -p is the smallest prime factor of N
              -q is the largest prime factor of N
*/
	// Bho proviamo a definire r
	r := Floor(N^(1/4)) + 1 ;
	// Bho proviamo a dare valore ai c e large
	C := [ 	<1,0,[30]>,
		<4,-24,[48,24,24,24]>,
		<4,-12,[24,24,48,24]>,
		<4,-18,[36,36,72,36]>,
		<8,-6, [12,36,24,12,24,12,24,36]>,
		<2,-2, [4,2]>,
		<1,-1, [2]>
	     ];
	n := N;
	for array in C do
		m:= array[1]; m0 := array[2];
		c := array[3];
		// this is the function large(m,m0,r,N,c);
		s := 1; k := m0;
		k := k + c[s];
		// forse if √® meglio ??
		s := (s mod m) + 1;
		while k le r do
			x,u := isqrt(4*k*n); 
			buff,t := isqrt(n div k);
			j := (buff - 1) div (4*(r+1)) + 1;
			if ((x+k) mod 2) eq 0 then 
				i1 := 1;
				u := u + 2*x +1;
				x := x + 1;
			else
				i1 := 0;
			end if;

			odd := (k mod 2) eq 1;
			if odd then 
				jump := 4;
			else 
				jump := 2;
			end if;

			// speed up : compress them
			if odd then 
				if ((k+n) mod 4) ne (x mod 4) then
					i1 := i1 + 2;
					u := u + 4*(x+1);
					x := x + 2;
				end if;
			end if;
			
			
			for i in [i1..(j+1) by jump] do
				if QR[(u-1) mod qr_mod + 1] then
					y,t := isqrt(u);
					if t eq 0 then
						// VICTORY
						p := Gcd(x-y,n);
						q := n div p;
						return Min(p,q),Max(p,q);
					end if;
				end if;
				if odd then
					
					u := u + 8*(x+2);
					x := x+ 4;
				else
					u := u + 4*(x+1);
					x := x + 2;
				end if;
			end for;
			k := k + c[s];
			s := (s mod m) + 1;
		end while;
	end for;
	return 1,N;
end function;




load "new_test_lehman.mag";

procedure test_lehman()
	pb := [car<IntegerRing(), IntegerRing(), IntegerRing()> | ];
	for test in TestLehman do
		n := test[1];
		p := test[2];
		r := Floor(n^(1/3)) + 1;
		if not (Sqrt((n/(r+1))) lt p and p le n^(1/2)) then
			"In this situation the theorem cannot grant the existance of a factorization with this algorithm";
		end if;
		p,q:=Factorization_Lehman(test[1]);
		if (p ne test[2]) or (q ne test[3]) then
			Append(~pb,test);
			"\nError! The problem is for test:",test; 
			"Output:",p, q; //break;
		end if;
	end for;
	pb;
end procedure;


time test_lehman();



