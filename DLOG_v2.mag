
function IntermediateZeroPadding(B, factors)
/*Now we want to memorize the factorization: setting the zeros where the element of B is missing in factorization of exponent:
B:=[p1,p2,p3,..,pn], n:=[<p1,e1>, <p2,e2>, <p3,e3>, ..., <pn, en>] -> IntermediateZeroPadding(B, factors):=[e1,e2,e3,..en]*/
  	counter:=1;
  	seq:=[0 : _ in B];
  	for i in [1..#B] do //for prime in B means that we analize all the primes that are in B (g^exponent is B-smooth)
		if (counter le #factors) and (B[i] eq factors[counter][1]) then
			seq[i] := factors[counter][2];
			counter+:=1;
		end if;
  	end for;
	return seq;
end function;



function SolveSystem(B,VectorOfexponent,SeqMatrixOfexponent,p,g,h,q)
  	//////We will find the solutions in modulus//////
	/////Remark, we are in the case where the primes are SophieGermain//////
	dim := #B + 1;

	// solutions for 2
	prime:=2;
	M := Transpose(Matrix( GF(prime), #SeqMatrixOfexponent, dim, SeqMatrixOfexponent ));
	Sol2 := Solution( M, Vector(GF(prime),VectorOfexponent));

	// solutions for q = (p-1)/2
	prime:=q; 
	M := Transpose(Matrix( GF(prime), #SeqMatrixOfexponent, dim, SeqMatrixOfexponent ));
	Solq := Solution( M, Vector(GF(prime),VectorOfexponent));

	return CRT([Integers()!Sol2[dim], Integers()!Solq[dim]], [2,q]);
end function;



//////Primes p are Sophie Germain p=2q+1//////
function IndexCalculus(p,g,h)
/*
   	INPUTS:	-p prime;
           	-g primitive root modulo p;
           	-h element of F_p*.
   
   	OUTPUT: -x integer, where g^x = h mod p.

  	The idea behind this algorithm is to compute small logarithm (also called index) with linear congruences and from them compute the big discrete logarithm we are interested in
*/
  	q := (p-1) div 2;

	//////Setting the bound//////

	/*We tried some choice of TopB:=Ceiling(Exp(c*(Log(Exp(1),N)^alpha)*(Log(Exp(1),Log(Exp(1),N))^(1-alpha))));
	changing the value of alpha and c we can see that alpha:=1/3 and c:=1.17 have good chance to be good values of the parameters
	Remark: there exists a good value of the parameter c for any value of the parameter alpha where c in (0..1) and alpha in (0..1) in the Rationals
	*/
	
	TopB:=Ceiling(Exp(1.17* (  (Log(Exp(1),p)*  ((Log(Exp(1),Log(Exp(1),p)))^2)  )  )^(1/3) ));


	B:=PrimesUpTo(TopB);

	//////Initialize variables//////
	VectorOfexponent:=[]; //this will hold all the exponent that satisfy our property
	SeqMatrixOfexponent:=[]; //this will hold all the exponents of the factorization of g^i in B

	//////Looking for g^exponent s.t. it is B-smooth and setting variables//////
	exponent:=Random(2,p-2);
	rows := 0;
	/*We tried some choice of bound_rows and bound_new_rows
	and bound_rows:=Floor((#B)*(0.78)); and bound_new_rows:=Floor((#B)*(0.32)); have good chance to be good values of the parameters
	*/
	bound_rows := Floor((#B)*(0.78));
	new_rows := 0;
	bound_new_rows :=Floor((#B)*(0.32));
	repeat
		repeat 
			FactorsOfgtoexponents:=Factorization((h*Modexp(g,-exponent,p)) mod p);
			//////Checking the B-smoot property//////
			if [FactorsOfgtoexponents[i][1]: i in [1..#FactorsOfgtoexponents]] subset B then
	      		//////We add the exponent g^exponent to the vector of exponents//////
				Append(~VectorOfexponent, exponent);
	      
				//////IntermediatePadding//////
				seq:=IntermediateZeroPadding(B, FactorsOfgtoexponents) cat [1];
				Append(~SeqMatrixOfexponent, seq);
				rows+:=1;
				new_rows+:=1;
			end if;
			exponent:=Random(2,p-2);
		until (rows gt bound_rows) and (new_rows gt bound_new_rows);
		new_rows := 0;
		sol := SolveSystem(B,VectorOfexponent,SeqMatrixOfexponent,p,g,h,q);
  	until Modexp(g,sol,p) eq h;
	return sol;
end function;

