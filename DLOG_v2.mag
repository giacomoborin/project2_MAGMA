  // Write a function called IndexCalculus(p,g,h) to compute the discrete logarithm 
  // of an element h ∈ Fp* = ⟨g⟩ with the following specifications:
  // 
  // NAME: IndexCalculus(p,g,h)
  // 
  // INPUTS: -p prime;
  //         -g primitive root modulo p;
  //         -h element of Fp*.
  // 
  // OUTPUTS: -x integer.
  // Where gx ≡ h mod p.



function IntermediateZeroPadding(B, factors)
//////Now we want to memorize the factorization setting the zeros where the element of B is missing in factorization of exponent//////
  	counter:=1;
  	seq:=[0 : _ in B];
  	for i in [1..#B] do //for prime in B means that we analize all the primes that are in B (g^exponent is B-smooth)
		if (counter le #factors) and (B[i] eq factors[counter][1]) then
			seq[i] := factors[counter][2];
			counter+:=1;
		end if;
  	end for;
	return seq;
end function;



function SolveSystem(B,VectorOfexponent,SeqMatrixOfexponent,p,g,h,q)
	//////In the next variable, there will be a vectors of different universe//////
	//SeqMatrixOfexponent;
  	//////This cycle will find the solution in modulus//////
	dim := #B + 1;

	// solutions for 2
	prime:=2;
	M := Transpose(Matrix( GF(prime), #SeqMatrixOfexponent, dim, SeqMatrixOfexponent ));
	Sol2 := Solution( M, Vector(GF(prime),VectorOfexponent));

	// solutions for q = (p-1)/2
	prime:=q; 
	M := Transpose(Matrix( GF(prime), #SeqMatrixOfexponent, dim, SeqMatrixOfexponent ));
	Solq := Solution( M, Vector(GF(prime),VectorOfexponent));

	return CRT([Integers()!Sol2[dim], Integers()!Solq[dim]], [2,q]);
end function;



//////Primes p are Sophie Germain p=2q+1//////
function IndexCalculus(p,g,h)
  	q := (p-1) div 2;
	g:=Integers()!g;
	h:=Integers()!h;
	//////Setting the bound//////

	// choice 1 : slowest for now
	//TopB:=Ceiling(Exp( Sqrt(Log(2,p)*Log(2,Log(2,p))) ));

	// choice 2 : 0.030 sec
	//TopB:=Ceiling(Exp( Sqrt(Log(Exp(1),p)*Log(Exp(1),Log(Exp(1),p))) ));

	// choice 3 : 0.030 sec || the fastest in the new implementation!!
	TopB:=Ceiling(Exp( (  (Log(Exp(1),p)*  ((Log(Exp(1),Log(Exp(1),p)))^2)  )  )^(1/3) ));

	B:=PrimesUpTo(TopB);

	//////Initialize variables//////
	VectorOfexponent:=[]; //this will hold all the exponent that satisfy our property
	SeqMatrixOfexponent:=[]; //this will hold all the exponents of the factorization of g^i in B

	//////Looking for g^exponent s.t. it is B-smooth and setting variables//////
	exponent:=Random(2,p-2);
	rows := 0;
	/*
	some choices for this percentage:
	- <0.94, 0.47> time 7.8 sec
	- <0.90, 0.07> time 7.5 sec
	- <0.96, 0.22> time 7.55 sec
	- <0,81, 0,32> time 9. sec
	*/
	bound_rows := Floor((#B)*(0.96));
	//bound_rows := #B;
	new_rows := 0;
	bound_new_rows := Floor((#B)*(0.22));
	//tentativi := 0;
	repeat
		repeat 
			FactorsOfgtoexponents:=Factorization((h*Modexp(g,-exponent,p)) mod p);
			//////Checking the B-smoot property//////
			if [FactorsOfgtoexponents[i][1]: i in [1..#FactorsOfgtoexponents]] subset B then
	      //////We add the exponent g^exponent to the vector of exponents//////
				Append(~VectorOfexponent, exponent);
	      
				//////IntermediatePadding//////
				seq:=IntermediateZeroPadding(B, FactorsOfgtoexponents) cat [1];
				Append(~SeqMatrixOfexponent, seq);
				rows+:=1;
				new_rows+:=1;
			end if;
			exponent:=Random(2,p-2);
		until (rows gt bound_rows) and (new_rows gt bound_new_rows);
		new_rows := 0;
		//tentativi +:= 1;
		sol := SolveSystem(B,VectorOfexponent,SeqMatrixOfexponent,p,g,h,q);
  	until Modexp(g,sol,p) eq h;
	//tentativi;
	return sol;
end function;


/*
//////////////////////////////TV//////////////////////////////
 
load "TestDLOG.mag";
err:=0;
time for test in TestIndexC do
	//test;
	p:=test[1];
	g:=test[2];
	h:=test[3];
	if not test[4] eq IndexCalculus(p,g,h) then
		err+:=1;
	end if;
end for;
err/#TestIndexC;
*/
