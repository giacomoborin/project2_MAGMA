
//-------------------------ECDSA--------------------------

procedure test_ECDSA()
for test in TestECDSA do
	el:=test[1];
	M:=test[2];
	q:=el[1][1];
	E:=EllipticCurve( [GF(q)!el[1][2],el[1][3]]  );
	P:=E!el[1][4];
	r:=el[1][5];
	d:=el[2][1];
	for m in M do
		R,s:=ECDSA_Signing(q,E,P,r,d,m);
		if not ECDSA_Verification(q, E, P, r, E!el[1][6], m, E!R, s) then
			"Error! These are test and m:\n";
			test; m; 
			break; 
		end if;
	end for;
end for;
end procedure;

//-------------------------Pohlig-Hellmann--------------------------

procedure test_pohlig_hellman()
	for i in [1..#TestPH] do 
		q:= TestPH[i][1][1];
		A:= GF(q)!TestPH[i][1][2];
		B:= GF(q)!TestPH[i][1][3];
		E:=EllipticCurve([A,B]);
		P:= E!TestPH[i][1][4];
		r:=TestPH[i][1][5];
		Q:=E!TestPH[i][1][6];
		d:= ECDLP_PohligHellman(q,E,P,r,Q);
		if d ne TestPH[i][2][1] then
			"Error! The problem is for test:\n";
			TestPH[i]; i; break;
		end if;
	end for;
end procedure;

//-------------------------Index-Calculus--------------------------

procedure test_index_calculus()
for test in TestIndexC do
	 p:=test[1];
	 F:=GF(p);
	 g:=F!test[2];
	 h:=F!test[3];
	 if not IndexCalculus(p,g,h) eq test[4] then
	 	"Error! The problem is for test:\n";
		test; break;
	end if;
end for;
end procedure;

//-------------------------Lehman--------------------------

procedure test_lehman()
for test in TestLehman do
	p,q:=Factorization_Lehman(test[1]);
	if (p ne test[2]) or (q ne test[3]) then
		"Error! The problem is for test:\n";
		test; p; q; break;
	end if;
end for;
end procedure;


//-------------------------Solovay Strassen--------------------------


procedure test_solovay_strassen()
for test in TestSolovay do
	if not SolovayStrassen(test) eq IsPrime(test) then
		"Error! The problem is for test:\n";
		test; break;
	end if;
end for;
end procedure;
