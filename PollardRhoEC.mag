
// this function try to find solutions to the equation a = x * b mod n
function solutions(a,b,n)
	// here we evaluate the gcd with extended euclidean algorithm
	// we use mu to evaluate the inverse the solutions of a = x * b mod n
	d,mu := Xgcd(b,n);
	// easy case
	if d eq 1 then 
		return [a*mu mod n];
	// other cases suitable for inversion
	elif a mod d eq 0 then
		sol_zero := mu * (a div d) mod n;
		// here we insert all the solutions of the eq
		return [ sol_zero + i*(n div d) : i in [0..(d-1)]];
	end if;
	return [];
end function;

// I'm sorry but I apprecciate too much nested functions 
function partition(A,s)
	return Integers()!A[1] mod s + 1;
end function;

function fp(STATE,N,M,a,b,s)
	j := partition(STATE[1],s);
	STATE[1] := STATE[1] + M[j];
	STATE[2] := (STATE[2] + a[j]) mod N;
	STATE[3] := (STATE[3] + b[j]) mod N;
	return STATE;
end function;

function PollardRhoEC(p, P, Q, ord)
/*
 	INPUTS:  	-p prime;
           		-P, Q points on the curve;
           		-ord is the order of P.
  	OUTPUTS: 	-n the discrete log of Q in base P.
*/
	N := ord;
	a0 := Random([0..(N-1)]);
	b0 := Random([0..(N-1)]);
	// initialization of the state
	XI := <a0*P + b0*Q, a0, b0>;
	XII := XI;
	s := 20;

	

	// generation of the a_i,b_i,M_i's
	a := [Random([0..(N-1)]) : i in [1..s]];
	b := [Random([0..(N-1)]) : i in [1..s]];
	M := [a[i]*P + b[i]*Q : i in [1..s]];

	// pollard update function, at every update it is preserved
	// STATE[1]¬†= STATE[2]*P + STATE[3]*Q


	sols := [];
	while true do
		// evaluation of the new state
		XI := fp(XI,N,M,a,b,s);
		XII := fp(fp(XII,N,M,a,b,s),N,M,a,b,s);
		// comparison of states 
		// observe that it is more compact than previous implementation
		if XI[1][3] eq 0 then
			sols := solutions(XI[2],XI[3],N);
		elif XII[1][3] eq 0 then
			sols := solutions(XII[2],XII[3],N);
		elif XI[1] eq XII[1] then
			sols := solutions(XI[2] - XII[2],XII[3] - XII[3],N);
		end if;
		// see if sols contains solutions
		// il sols is empty this passage is skipped
		for sol in sols do
			if sol * P eq Q then 
				return sol;
			end if;
		end for;
	end while;
end function;
